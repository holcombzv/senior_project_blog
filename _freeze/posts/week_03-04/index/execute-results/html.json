{
  "hash": "3c71f816a31e1e3ae81fb410d1bff8b9",
  "result": {
    "markdown": "---\ntitle: \"Week 3-4: Model Creation\"\nauthor: \"Zach Holcomb\"\ndate: \"2025-02-03\"\ncategories: [code, analysis]\nimage: \"image.jpg\"\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nimport os\nimport torch\n\n# Load the model and tokenizer from the local directory\npretrained = \"Salesforce/codegen-350M-mono\"\ntokenizer = AutoTokenizer.from_pretrained(pretrained)\nmodel = AutoModelForCausalLM.from_pretrained(pretrained)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome weights of the model checkpoint at Salesforce/codegen-350M-mono were not used when initializing CodeGenForCausalLM: ['transformer.h.0.attn.causal_mask', 'transformer.h.1.attn.causal_mask', 'transformer.h.10.attn.causal_mask', 'transformer.h.11.attn.causal_mask', 'transformer.h.12.attn.causal_mask', 'transformer.h.13.attn.causal_mask', 'transformer.h.14.attn.causal_mask', 'transformer.h.15.attn.causal_mask', 'transformer.h.16.attn.causal_mask', 'transformer.h.17.attn.causal_mask', 'transformer.h.18.attn.causal_mask', 'transformer.h.19.attn.causal_mask', 'transformer.h.2.attn.causal_mask', 'transformer.h.3.attn.causal_mask', 'transformer.h.4.attn.causal_mask', 'transformer.h.5.attn.causal_mask', 'transformer.h.6.attn.causal_mask', 'transformer.h.7.attn.causal_mask', 'transformer.h.8.attn.causal_mask', 'transformer.h.9.attn.causal_mask']\n- This IS expected if you are initializing CodeGenForCausalLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing CodeGenForCausalLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n```\n:::\n:::\n\n\n## Model Difficulties\n\nMuch of my time these weeks was spent wrestling with the model to be able to run the training on my limited hardware. The main difficulties were the limited memory of my GPU and the time it took to train. I implemented several methods to help with one or both of these issues.\n\n### Layer Freezing\n\nOne popular technique when using transfer learning is **layer freezing**. When training a neural network, the weights of all of the various nodes are being adjusted based on the training data. When using a pretrained model as we are with the codegen model, it is often unnecessary to adjust all of the nodes, especially the nodes closer to the input. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom torchinfo import summary\n\nsummary(model, input_size=(1, 128), dtypes=[torch.long])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n====================================================================================================\nLayer (type:depth-idx)                             Output Shape              Param #\n====================================================================================================\nCodeGenForCausalLM                                 [1, 16, 128, 64]          --\n├─CodeGenModel: 1-1                                [1, 16, 128, 64]          --\n│    └─Embedding: 2-1                              [1, 128, 1024]            52,428,800\n│    └─Dropout: 2-2                                [1, 128, 1024]            --\n│    └─ModuleList: 2-3                             --                        --\n│    │    └─CodeGenBlock: 3-1                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-2                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-3                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-4                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-5                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-6                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-7                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-8                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-9                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-10                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-11                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-12                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-13                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-14                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-15                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-16                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-17                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-18                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-19                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-20                     [1, 128, 1024]            12,590,080\n│    └─LayerNorm: 2-4                              [1, 128, 1024]            2,048\n├─Linear: 1-2                                      [1, 128, 51200]           52,480,000\n====================================================================================================\nTotal params: 356,712,448\nTrainable params: 356,712,448\nNon-trainable params: 0\nTotal mult-adds (Units.MEGABYTES): 356.71\n====================================================================================================\nInput size (MB): 0.00\nForward/backward pass size (MB): 264.24\nParams size (MB): 1426.85\nEstimated Total Size (MB): 1691.09\n====================================================================================================\n```\n:::\n:::\n\n\nCodeGen-350M Architecture:\n\nCodeGenForCausalLM                                 [1, 16, 128, 64]          --\n├─CodeGenModel: 1-1                                [1, 16, 128, 64]          --\n│    └─Embedding: 2-1                              [1, 128, 1024]            52,428,800\n│    └─Dropout: 2-2                                [1, 128, 1024]            --\n│    └─ModuleList: 2-3                             --                        --\n│    │    └─CodeGenBlock: 3-1                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-2                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-3                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-4                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-5                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-6                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-7                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-8                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-9                      [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-10                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-11                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-12                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-13                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-14                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-15                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-16                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-17                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-18                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-19                     [1, 128, 1024]            12,590,080\n│    │    └─CodeGenBlock: 3-20                     [1, 128, 1024]            12,590,080\n│    └─LayerNorm: 2-4                              [1, 128, 1024]            2,048\n├─Linear: 1-2                                      [1, 128, 51200]           52,480,000\n\nLooking at the model, we can see that after the input and dropout layers, there are 20 layers of transformation nodes. These layers will have already been tuned by the developers of the model, so we can freeze some of these layers to save us time and resources. For now, we will freeze the first half (10) transformation layers as well as the input embedding layer.\n\n```python\n# Freeze the embedding layer\nfor param in model.base_model.wte.parameters():\n    param.requires_grad = False\n\n# Freeze the first 10 transformer blocks\nfor layer in model.base_model.h[:10]:\n    for param in layer.parameters():\n        param.requires_grad = False\n```\n\n### Pruning\n\nThis model was created to generate a variety of Python code that we don't need for our task. This allows us to \"prune\" or shrink the layers to a more reasonable size. This will speed up training immensely at the potential cost of performance. For now I am pruning the transformatioon layers to half their original size, meaning that there are still 20 transformation layers, but they are all half as big as before. I may change this later if the performance is not meeting expectations.\n\n```python\n# Pruning\n\nimport torch.nn.utils.prune as prune\n\ndef prune_model(model, amount=0.3):\n    \"\"\"\n    Prunes the attention and MLP layers of CodeGenForCausalLM.\n    \n    Parameters:\n    - model: CodeGenForCausalLM model instance\n    - amount: Fraction of weights to prune (e.g., 0.3 means 30% of small weights are pruned)\n    \"\"\"\n    for block in model.transformer.h:\n        # Prune attention layers\n        prune.l1_unstructured(block.attn.qkv_proj, name=\"weight\", amount=amount)\n        prune.l1_unstructured(block.attn.out_proj, name=\"weight\", amount=amount)\n\n        # Prune MLP layers\n        prune.l1_unstructured(block.mlp.fc_in, name=\"weight\", amount=amount)\n        prune.l1_unstructured(block.mlp.fc_out, name=\"weight\", amount=amount)\n\nprune_model(model, amount=0.5)\n\ndef remove_pruning(model):\n    \"\"\"Removes pruning reparameterization to free up memory.\"\"\"\n    for block in model.transformer.h:\n        prune.remove(block.attn.qkv_proj, \"weight\")\n        prune.remove(block.attn.out_proj, \"weight\")\n        prune.remove(block.mlp.fc_in, \"weight\")\n        prune.remove(block.mlp.fc_out, \"weight\")\n\nremove_pruning(model)\n```\n\n### LoRa\n\nWhile researching these methods to save time and memory, I came across a technique reffered to as **Low-Rank Adaptation(LoRa)**. LoRa is a method used during the training process of larger pretrained models. LoRa basiccally tells the trainer to prioritize lower-weight parameters. This helps the model to retain its original potency while being trained for more specific tasks. Using LoRa makes our previous modifications to the model somewhat redundant, but every little bit helps.\n\nApplying LoRa to our model is very straightforward. Rather than manually telling LoRa what layers to modify like we had to for freezing and pruning, LoRa automatically determines which layer parameters to modify. The main parameters that we are concerned with are r, lora_alpha, and lora_dropout. Changing these can help improve tarining time at the cost of adaptability and performance.\n\n``` python\n# create LoRa model\nlora_config = LoraConfig(\n    r=8, # Affects size and training efficency of model. Low values(1-8) limit the size of the model during training, but model will have a harder time adapting to new tasks.\n    lora_alpha=32, # Affects the model's ability to retain previous weights. Low values (1-16) causesthe new weights to be less impactful, creating a model closer to the original.\n    lora_dropout=0.1, # Acts in a similar fashion to a dropout layer during training. Removes some of the weights for each step, preventing the model from relying too much on a single node. This is used to combat overfitting during training.\n    bias=\"none\",\n    task_type=TaskType.CAUSAL_LM\n)\n\nmodel = get_peft_model(model, lora_config)\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}